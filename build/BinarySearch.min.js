(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=typeof globalThis!=="undefined"?globalThis:global||self,global.BinarySearch=factory())})(this,(function(){"use strict";function BinarySearch(){throw new Error("BinarySearch cannot be used as function or constructor, use its static properties and methods instead.")}BinarySearch.getIndex=function(arr,property,find){if(!arr||arr.constructor!==Array){throw new TypeError(`'BinarySearch.getIndex(arr, property, find)' expected the value of 'arr' to be an array, but instead ${arr&&arr.constructor.name} was found.`)}if(!property||property.constructor!==Function){throw new TypeError(`'BinarySearch.getIndex(arr, property, find)' expected the value of 'property' to be a function, but instead ${property&&property.constructor.name} was found.`)}let left=0;let right=arr.length-1;while(left<=right){let mid=Math.floor((left+right)/2);const PROPERTY=property(arr[mid]);if(PROPERTY===find){return mid}else if(PROPERTY<find){left=mid+1}else{right=mid-1}}return-1};BinarySearch.getValue=function(arr,property,find){const INDEX=BinarySearch.getIndex(arr,property,find);if(INDEX===-1){return undefined}return arr[INDEX]};return BinarySearch}));